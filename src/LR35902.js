// 4213440 ticks per second

const CLOCK = 4194304; //Hz

const OPCODE_LENGTTHS = [1,3,1,1,1,1,2,1,3,1,1,1,1,1,2,1,2,3,1,1,1,
                  1,2,1,2,1,1,1,1,1,2,1,2,3,1,1,1,1,2,1,2,1,
                  1,1,1,1,2,1,2,3,1,1,1,1,2,1,2,1,1,1,1,1,2,
                  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                  1,1,1,1,1,3,3,3,1,2,1,1,1,3,1,3,3,2,1,1,1,
                  3,0,3,1,2,1,1,1,3,0,3,0,2,1,2,1,2,0,0,1,2,
                  1,2,1,3,0,0,0,2,1,2,1,2,1,0,1,2,1,2,1,3,1,
                  0,0,2,1];

const OPCODE_CYCLES1 = [4,12,8,8,4,4,8,4,20,8,8,8,4,4,8,4,4,12,8,8,4,
                4,8,4,12,8,8,8,4,4,8,4,12,12,8,8,4,4,8,4,12,8,
                8,8,4,4,8,4,12,12,8,8,12,12,12,4,12,8,8,8,4,4,
                8,4,4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,4,
                4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,
                4,4,8,4,8,8,8,8,8,8,4,8,4,4,4,4,4,4,8,4,4,4,4,
                4,4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,4,4,
                4,4,4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,4,
                4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,20,12,16,16,24,
                16,8,16,20,16,16,4,24,24,8,16,20,12,16,0,24,16,
                8,16,20,16,16,0,24,0,8,16,12,12,8,0,0,16,8,16,
                16,4,16,0,0,0,8,16,12,12,8,4,0,16,8,16,12,8,16,
                4,0,0,8,16];

const OPCODE_CYCLES2 = [4,12,8,8,4,4,8,4,20,8,8,8,4,4,8,4,4,12,8,8,4,
                 4,8,4,12,8,8,8,4,4,8,4,8,12,8,8,4,4,8,4,8,
                 8,8,8,4,4,8,4,8,12,8,8,12,12,12,4,8,8,8,8,
                 4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,
                 4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,
                 4,4,8,4,8,8,8,8,8,8,4,8,4,4,4,4,4,4,8,4,4,4,4,4,
                 4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,
                 4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,4,4,8,4,4,4,4,4,
                 4,4,8,4,4,4,4,4,4,4,8,4,8,12,12,16,12,
                 16,8,16,8,16,12,4,12,24,8,16,8,12,
                 12,0,12,16,8,16,8,16,12,0,12,0,8,
                 16,12,12,8,0,0,16,8,16,16,4,16,0,0,0,8,16,12,12,
                 8,4,0,16,8,16,12,8,16,4,0,0,8,16];

export function initLR35902(addressSpace) {
    let IME = false; // interrupt master enable

    let A = 0x01; // accumulator
    let F = 0x00; // flag registers ZNHC0000
    let B = 0x00; //                |||+-Carry Flag
    let C = 0x13; //                ||+--Half Carry Flag
    let D = 0x00; //                |+---Subtract Flag
    let E = 0xD8; //                +----Zero Flag
    let H = 0x01;
    let L = 0x4D;
    
    let PC = 0x0100; // program counter 
    let SP = 0xFFFE; // stack pointer

    function increment(value8bit) {
        F = F&0b10010000;//N=0,H=0
        if (value8bit > 254) {
            F = F|0b01100000;//N=1,H=1
            value8bit = 0;
        } else {
            F = F&0b01110000;//Z=0
            if (value8bit%16 == 15) F = F|0b00100000;//H=1
            value8bit++;
        }        
        return value8bit;
    }

    function decrement(value8bit) {
        F = F&0b11010000|0b01000000;//H=0,N=1
        if (value8bit == 0) {
            F = F&0b01110000|0b00100000;//Z=0,H=1
            value8bit = 255;
        } else if (value8bit == 1) {
            F = F|0b10000000;//Z=1
        } else {
            F = F&0b01110000;//Z=0
            if (value8bit%16 == 0) F = F|0b00100000;//H=1
            value8bit--;
        }
        return value8bit;
    }

    let stopped = 0;
    function STOP(){ stopped = 1; }
    function resume(){ stopped = 0; }
  
    // http://www.pastraiser.com/cpu/gameboy/gameboy_opcodes.html
    //                  |INS reg|← Instruction mnemonic
    // Length in bytes →|  2 8  |← Duration in cycles
    //                  |Z N H C|← Flags affected
    const OPCODES = [
        /* 0x00 NOP          */ function(){},
        /* 0x01 LD BC,d16    */ function(){C=addressSpace.read(++PC);B=addressSpace.read(++PC);},
        /* 0x02 LD (BC),A    */ function(){addressSpace.write(word(B,C),A);},
        /* 0x03 INC BC       */ function(){let val=word(B,C)+1;B=hi(val);C=lo(val);},
        /* 0x04 INC B        */ function(){increment(B);},
        /* 0x05 DEC B        */ function(){decrement(B);},
        /* 0x06 LD B,d8      */ function(){B=addressSpace.read(++PC);},

    ];

    return {
        run: function() {

    // Instruction Extender (0xCB)

        }
    };
}